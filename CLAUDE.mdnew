1. Read through my entire bin/ and install.sh in ultrathink and generate a full, working understanding of this codebase.
2. Update the README mimicing the existing format of simplicity over verboseness. You may modify existing entries but must keep the install at the top. Please modify it to include the other applications. No emojiis please.
3. Generate a new file called NEWCLAUDE.md and generate a new CLAUDE.md file that you would use in the future to best prepare yourself to manage this repo. The goal of this repo is to create scripts that run as commands on MacOS (and potentially Linux) to augment user effeciency. The contents of that file will replace the existing contents here.
4. Before beginning, I want you to prompt me with any suggestions you may have of what else to include to make this as meaningful as possible in the fewest amount of tokens needed.
5. Below is the suggested workflow I have for you. Please let me know your thoughts, if I should make any changes,additions, or removals.
6. Where I reference below the code inside gitversion, please modify the workflow to display the values you source, instead of forcing it to read the code every time.

# Git workflow for feature development

## On each feature request:
- Make a new branch: `feature/xxx-desc` off `main` and switch to it.
- Use the [conventional commits](https://www.conventionalcommits.org/en/v1.0.0/#specification) specification that is applied to the gitversion app in the bin/ folder.
- Commit often: prepend messages based on the keywords (or in the case of subversion, lackthereof) identified in gitversion.  
- 
- Always `git push origin feature/xxx-desc`

## Keep branches up‑to‑date:
- Before final review, `git fetch origin && git rebase origin/main`
- Run tests and fix conflicts

## When ready:
- Open a Pull Request to `main`  
- Wait for approvals and CI passes  
- Merge only through PR (never `git merge` directly to main)

## After merge:
- Switch to `main`, `git pull`
- Create an annotated tag `vX.Y.Z – summary of changes`
- `git push origin vX.Y.Z`

## If a new feature updates past code:
- Rebase feature branch on latest `main`
- Fix, test, commit, and PR again

## Branch naming & commit style:
- Branch names: `feature/short‑desc‑or‑ticket` or `bugfix/xyz`
- Commit style:  
  `feat: ` new feature  
  `fix: ` bug fix  
  `docs: ` documentation  
  `chore: ` non‑code updates

Claude follows this and never pushes directly to `main`—it always creates a branch, pushes to remote, rebases, opens a PR, and tags after—ensuring full tracking.

