################## test/test3.csv START ##################
baz
################## test/test3.csv END ####################

################## test/test4/test5.txt START ##################
zzz
################## test/test4/test5.txt END ####################

################## test/test2 START ##################
bar
################## test/test2 END ####################

################## /Users/johnv/.zshrc START ##################
#!/usr/bin/env zsh
export PATH="/opt/homebrew/bin:/$HOME/.local/bin:$PATH"

export EDITOR=micro

HIST_STAMPS="mm/dd/yyyy"
HISTFILE="$HOME/.histfile"
HISTSIZE=1000
SAVEHIST=10000
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt nosharehistory

export OS="mac"
export GITHUBPATH="$HOME/github"
export REPORTSPATH="$HOME/Documents/REPORTS"
export DOTFILESPATH="$HOME/github/dotfiles"
export DOTFILESHOME="$DOTFILESPATH/$OS/files/HOME"
export CREDS="$GITHUBPATH/.env"
export SSI_TECHDOCS="$HOME/OneDrive - Shippers Supply, Inc/SSI - Tech Docs"

# Binds SSH to 1Password agent
export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock

# Grab all env files and push to global
for file in "$CREDS"/*.env(.N); do
  prefix=$(basename "$file" .env)
  while IFS='=' read -r key value || [[ -n $key ]]; do
    [[ -z $key || ${key:0:1} == "#" ]] && continue
    export "${prefix}_${key}"="$value"
  done < "$file"
done


# Check if running in VS Code's integrated terminal
if [[ -n "${TERM_PROGRAM:-}" && "$TERM_PROGRAM" == "vscode" ]]; then
    PS1='%F{blue}> %f'
else
    PS1='%F{green}%~ %F{yellow}> %f'
fi

# Default editor and file viewer
EDITOR="${EDITOR:-micro}"
VISUAL="${VISUAL:-code}"

alias lls="\ls -F --color -h $*" 
alias llls="lls -A"
alias lsl="ls -l --time-style=long-iso"
alias l="ls"
cd() { builtin cd "$@" && ls; }
alias ..="cd \"..\""
alias cd..=".."
alias diff="git diff --no-index --"
alias grep="grep --color=auto"
alias fgrep="grep -F"
alias egrep="grep -E"
alias cp="cp -r"
alias showcolors="curl -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/e50a28ec54188d2413518788de6c6367ffcea4f7/print256colours.sh | bash"

# curl
alias curl="curl -L"
alias cu="curl -s"
alias cug="curl --request GET $1"
alias cup="curl --request POST $1 --data '$2'"

# tmux
alias tm="tmux"
alias tmls="tmux ls"
tmn() { tmux new-session -s $1 -d; tmux switch-client -t $1; }
alias tmal="tmux attach-session"
alias tmal.="tmux attach-session -c $(pwd)"
alias tman="tmux attach-session -t $1"
alias tmr="tmux rename-session $1"
alias tmrn="tmux rename-session -t $1 $2"
alias tmk="tmux kill-session"
alias tmkl="tmk"
tmkn() { tmux kill-session -t $1; }
alias tmka="tmux kill-server"
alias tmkab="tmux kill-session -a -t $1"
alias tsf="tmux source-file ~/.tmux.conf"
alias mux="tmuxinator"

# Docker
alias doc="docker-compose"
alias docu="docker-compose up -d"
alias docul="docu && docker-compose logs -f"
alias docl="docker-compose logs -f"
alias docd="docker-compose down"

alias nano='micro'
alias te='open -a TextEdit'
alias sbash='source ~/.zshrc'
alias ebash='${EDITOR} ~/.zshrc'
alias eflake='${VISUAL} ~/.config/nix/nix.code-workspace'
alias rflake='sudo darwin-rebuild switch --flake ~/.config/nix#JV-Macbook'
alias uflake="nix flake update --recreate-lock-file --flake ~/.config/nix#JV-Macbook"
alias psh='pwsh'
alias ls='eza -baX'
alias lsa='eza -lbax --width=80'
alias cls='clear'
alias clr='clear'

alias ports="lsof -i"
alias listen="sudo lsof -i | grep LISTEN"
alias wanip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p'"
alias flushdns="sudo discoveryutil mdnsflushcache;sudo discoveryutil udnsflushcaches;say flushed"

alias loc="scc"
alias win11="pwsh ~/github/scripts/ssi/powershell/intune/Get-Win11UpgradeUpdate.ps1"
alias intune11="pwsh ~/github/scripts/ssi/powershell/intune/Get-Win11Intune.ps1"
alias ssnewuser="pwsh ~/github/scripts/ssi/powershell/user/Add-NewUser.ps1"
alias tkill="kill-port 5173"
alias twatch="source ~/github/vtasks/.scripts/watch.sh"
alias copystuff="source ~/github/scripts/shell/setup/mac/copystuff.sh"
alias epwsh="${VISUAL} ~/.config/powershell/Microsoft.PowerShell_profile.ps1"
alias codebash="${VISUAL} ~/.zshrc"
alias usage="npx ccusage@latest"
alias getdeletes="pwsh ~/github/scripts/ssi/powershell/entra/Get-Deletes.ps1"

alias dotadd="dotfiler add $1"
alias dotignore="dotfiler ignore $1"
alias dotbuild="dotfiler build"
alias dotlist="dotfiler list"
alias dotremove="dotfiler remove $1"
alias doupdate="source $DOTFILESPATH/$OS/scripts/$OS-update.sh"

alias pyenv="echo \"layout python3\" >> .envrc; direnv allow ."
alias genvars="bash $GITHUBPATH/scripts/ssi/auth/onepassword/generate-envs.sh"
alias eespanso="${VISUAL} '$(espanso path config)'"
alias goreports="cd $REPORTSPATH"
alias gogithub="cd $GITHUBPATH"
alias goscripts="cd $GITHUBPATH/scripts"
alias godotfiles="cd $GITHUBPATH/dotfiles/mac"
alias escripts="${VISUAL} $GITHUBPATH/scripts"
alias edotfiles="${VISUAL} $GITHUBPATH/dotfiles"
alias importssicert="op document get --vault=API --output $CREDS/SSI_POWERSHELL_LOCAL.pfx SSI_POWERSHELL_LOCAL_PFX"
alias docknames="docker ps --format '{{.Names}}'"
alias dockkill="docker rm -fv $1"
alias techstackdestroy="bash $GITHUBPATH/ssi-techstack/scripts/destroy.sh"
alias techstackup="bash $GITHUBPATH/ssi-techstack/scripts/up.sh"
alias techstackdown="bash $GITHUBPATH/ssi-techstack/scripts/down.sh"
alias techstackportup="bash $GITHUBPATH/ssi-techstack/scripts/portup.sh"
alias techstackportdown="bash $GITHUBPATH/ssi-techstack/scripts/portdown.sh"
alias techstacknuke="bash $GITHUBPATH/ssi-techstack/scripts/nuke.sh"
alias dockhealth="docker ps --format 'table {{.Names}}\t{{.Status}}'"
alias docklogs="docker logs -f $1"
alias dockrestart="docker restart $1"
alias dockstop="docker stop $1"
alias dockstart="docker start $1"
alias clogstream="tail -F -n 30 $HOME/Library/Logs/clog/main.log"
alias dotfiles="code $GITHUBPATH/dotfiles"
alias dockresetubuntu="dockreset $GITHUBPATH/ansible/server/ubuntu"
alias codescripts="code $GITHUBPATH/scripts"
alias codedotfiles="code $GITHUBPATH/dotfiles"
alias codemacapps="code $GITHUBPATH/macapps"
alias codeansible="code $GITHUBPATH/ansible"
alias codetechstack="code $GITHUBPATH/ssi-techstack"
alias gv="gitversion"
alias perms="stat -c '%A %a %n'"

#alias pip="pip3"
#alias python="python3"

userlinks() {
  pwsh ~/github/scripts/ssi/powershell/user/Get-UserLinks.ps1 -upn $1
}

# Docker Build Command for Ansible Host
build_host() {
  local cwd=$(pwd)
  cd "$GITHUBPATH/ansible_test_lab"
  
  # Convert positional args to key=value if needed
  local args=()
  [[ -n $1 && $1 != --* && $1 != *=* ]] && args+=("-e" "name=$1") && shift
  [[ -n $1 && $1 != --* && $1 != *=* ]] && args+=("-e" "type=$1") && shift
  
  # Add remaining arguments
  for arg in "$@"; do
    [[ $arg == *=* ]] && args+=("-e" "$arg") || args+=("$arg")
  done
  
  ansible-playbook playbooks/build_host.yml "${args[@]}"
  cd "$cwd"
}
####

toggle_password() {
  pwsh -connect "$GITHUBPATH/scripts/ssi/powershell/user/functions/Toggle-Password.ps1" -UserId "$1"
}
 alias togglepass="toggle_password $1"

# Wire up pwsh to connect to all modules
pwsh() {
  if [[ "$1" == "-connect" ]]; then
    shift
    # Run Connect-All.ps1 as a file.  This will load your profile first, then run the script.
    command pwsh -NoExit -File "$HOME/.config/powershell/Connect-All.ps1"
  else
    #command pwsh "$@" -SettingsFile "$HOME/.config/powershell/powershell.config.json"
    command pwsh "$@"
  fi
}

function curltest() {
  curl -s $1 | grep -q "$2" && echo TRUE
}

if [[ -o interactive ]]; then
  # Make sure colors are available for the prompt
  autoload -U colors && colors

  # Zoxide setup and execution
  export _ZO_DATA_DIR="$DOTFILESHOME/.local/share/zoxide"
  source /opt/homebrew/opt/zinit/zinit.zsh

  # Deferrer
  zinit light romkatv/zsh-defer

  eval "$(starship init zsh)"

  # now every heavy plugin is wrapped once
  zsh-defer zinit light zdharma-continuum/fast-syntax-highlighting
  zsh-defer zinit light zsh-users/zsh-autosuggestions
  zsh-defer zinit ice blockf 
  zsh-defer zinit light zsh-users/zsh-completions
  zsh-defer zinit snippet OMZP::gnu-utils
  zsh-defer zinit snippet OMZP::zsh-interactive-cd

  zsh-defer eval "$(zoxide init zsh)"
  zsh-defer eval "$(direnv hook zsh)"
  #1Password autocompletion
  #zsh-defer eval "$(op completion zsh)"; compdef _op op
fi

# Add global pip to PATH
function addpip() {
  export PIPPATH="$HOME/Library/Python/$(python3 -c "import sys; print(f\"{sys.version_info.major}.{sys.version_info.minor}\")")/bin"
  export PATH="$PATH:$PIPPATH"
}

addpip
################## /Users/johnv/.zshrc END ####################

