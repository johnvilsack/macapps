#!/usr/bin/env zsh

# Default paths
SETTINGS_PATH="${HOME}/.config/plists"
OUTPUT_PATH="./"

# Global options
DRY_RUN=false
GENERATE_SCRIPT=false

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

usage() {
    cat << EOF
Usage: $0 COMMAND [OPTIONS] [ARGS]

Manage macOS application preferences via .settings files

Commands:
    add APP_NAME        Extract preferences from an app and create .settings file
    add BUNDLE_ID       Extract preferences using bundle ID directly
    update             Update .settings files with current system values
    write              Write values from .settings files to system defaults

Global Options:
    -n, --dry-run      Show what would be done without making changes
    -h, --help         Show this help

Command-specific Options:
    write:
        -g, --generate     Generate script with all commands
        -o, --output PATH  Output directory for generated script (default: ./)
    
Examples:
    $0 add "Visual Studio Code"    # Extract VS Code preferences
    $0 add com.apple.finder         # Extract using bundle ID directly
    $0 update -n                    # Show what would be updated
    $0 write                        # Apply all settings to system
    $0 write -g -o ~/scripts        # Generate apply script

EOF
}

# Helper Functions

error() {
    echo -e "${RED}Error: $1${NC}" >&2
}

success() {
    echo -e "${GREEN}âœ“ $1${NC}"
}

warning() {
    echo -e "${YELLOW}Warning: $1${NC}"
}

# Escape special characters for shell
escape_value() {
    printf '%q' "$1"
}

# Read current value from defaults
read_defaults_value() {
    local domain="$1"
    local key="$2"
    local result
    
    if result=$(defaults read "$domain" "$key" 2>/dev/null); then
        echo "$result"
        return 0
    else
        return 1
    fi
}

# Format value for .settings file
format_for_file() {
    local value="$1"
    local type="$2"
    
    if [[ "$type" == "string" ]]; then
        # Escape any quotes in the value
        value="${value//\"/\\\"}"
        echo "\"$value\""
    else
        # For numbers and booleans, use as-is
        echo "$value"
    fi
}

# Detect value type from current file value
detect_type() {
    local value="$1"
    
    # If wrapped in quotes, it's a string
    if [[ "$value" =~ ^\".*\"$ ]]; then
        echo "string"
    elif [[ "$value" =~ ^-?[0-9]+$ ]]; then
        echo "int"
    elif [[ "$value" =~ ^-?[0-9]+\.[0-9]+$ ]]; then
        echo "float"
    elif [[ "$value" == "true" || "$value" == "false" || "$value" == "YES" || "$value" == "NO" ]]; then
        echo "bool"
    else
        echo "string"
    fi
}

# Determine value type and format for defaults write command
format_value_for_write() {
    local val="$1"
    
    # Check for boolean
    if [[ "$val" == "true" || "$val" == "false" || "$val" == "YES" || "$val" == "NO" ]]; then
        echo "-bool $val"
        return
    fi
    
    # Check for integer
    if [[ "$val" =~ ^-?[0-9]+$ ]]; then
        echo "-int $val"
        return
    fi
    
    # Check for float
    if [[ "$val" =~ ^-?[0-9]+\.[0-9]+$ ]]; then
        echo "-float $val"
        return
    fi
    
    # Default to string with escaped value
    echo "-string $(escape_value "$val")"
}

# Check if value needs updating
needs_update() {
    local domain="$1"
    local key="$2"
    local new_value="$3"
    local current_value
    
    # Try to read current value
    if current_value=$(defaults read "$domain" "$key" 2>/dev/null); then
        # Compare values (normalize booleans)
        if [[ "$new_value" == "true" || "$new_value" == "YES" ]]; then
            [[ "$current_value" != "1" ]]
        elif [[ "$new_value" == "false" || "$new_value" == "NO" ]]; then
            [[ "$current_value" != "0" ]]
        else
            [[ "$current_value" != "$new_value" ]]
        fi
    else
        # Key doesn't exist, needs update
        true
    fi
}

# ADD command - Extract preferences from an app
cmd_add() {
    local input="$*"
    local apppath
    local bundle_id
    
    if [[ -z "$input" ]]; then
        error "App name or bundle ID required"
        echo "Usage: $0 add APP_NAME  or  $0 add BUNDLE_ID"
        return 1
    fi
    
    # Check if input looks like a bundle ID (contains dots, follows reverse domain notation)
    if [[ "$input" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z0-9.-]+$ ]]; then
        # Direct bundle ID provided
        bundle_id="$input"
        echo "Using bundle ID: $bundle_id"
    else
        # Search for app by name
        apppath=$(find /Applications "$HOME/Applications" /System/Applications \
            -type d -iname "${input}.app" -print -quit 2>/dev/null)
        
        if [[ -z "$apppath" ]]; then
            error "App not found: $input"
            echo "Searching for partial matches..."
            find /Applications "$HOME/Applications" /System/Applications \
                -type d -iname "*${input}*.app" -print 2>/dev/null | head -5
            return 1
        fi
        
        success "Found: $apppath"
        
        # Get bundle identifier
        bundle_id=$(mdls "$apppath" | grep '^kMDItemCFBundleIdentifier' | sed 's/^.*= "\(.*\)"$/\1/')
        
        if [[ -z "$bundle_id" ]]; then
            error "Could not extract bundle identifier"
            return 1
        fi
        
        echo "Bundle ID: $bundle_id"
    fi
    
    # Create output directory if it doesn't exist
    mkdir -p "$SETTINGS_PATH"
    
    # Read defaults and save to file
    local output_file="$SETTINGS_PATH/${bundle_id}.settings"
    
    if defaults read "$bundle_id" > "$output_file" 2>/dev/null; then
        success "Settings saved to: $output_file"
        dotfiler build
    else
        warning "No defaults found for $bundle_id (this is normal for many apps)"
        # Create empty file to indicate we tried
        echo "{}" > "$output_file"
        echo "Created empty file: $output_file"
    fi
}

# UPDATE command - Sync .settings files with current system values
cmd_update() {
    local settings_files=("${SETTINGS_PATH}"/*.settings(N))
    local total_files=0
    local total_changes=0
    local failed_updates=()
    
    if [[ ${#settings_files[@]} -eq 0 ]]; then
        error "No .settings files found in $SETTINGS_PATH"
        return 1
    fi
    
    for file in $settings_files; do
        ((total_files++))
        local domain="${file:t:r}"
        local temp_file="${file}.tmp"
        local changes=0
        local target_file="$file"
        local in_braces=false
        
        # Check if file is a symlink and resolve it
        if [[ -L "$file" ]]; then
            target_file=$(readlink -f "$file")
            echo "Checking: ${file:t} -> ${target_file}"
        else
            echo "Checking: ${file:t}"
        fi
        
        # Process file line by line
        while IFS= read -r line || [[ -n "$line" ]]; do
            # Handle opening and closing braces
            if [[ "$line" =~ '^[[:space:]]*\{[[:space:]]*$' ]]; then
                in_braces=true
                [[ "$DRY_RUN" == false ]] && echo "$line" >> "$temp_file"
                continue
            elif [[ "$line" =~ '^[[:space:]]*\}[[:space:]]*$' ]]; then
                in_braces=false
                [[ "$DRY_RUN" == false ]] && echo "$line" >> "$temp_file"
                continue
            fi
            
            # Skip comments and empty lines
            [[ "$line" =~ '^[[:space:]]*#' ]] && { [[ "$DRY_RUN" == false ]] && echo "$line" >> "$temp_file"; continue; }
            [[ "$line" =~ '^[[:space:]]*$' ]] && { [[ "$DRY_RUN" == false ]] && echo "$line" >> "$temp_file"; continue; }
            
            # Check if line contains a setting (handle indented lines)
            if [[ "$line" =~ '^([[:space:]]*)"([^"]+)"([[:space:]]*=[[:space:]]*)(.*)(;[[:space:]]*)$' ]]; then
                local prefix="${match[1]}"
                local key="${match[2]}"
                local middle="${match[3]}"
                local current_value="${match[4]}"
                local suffix="${match[5]}"
                
                # Try to read system value
                if system_value=$(read_defaults_value "$domain" "$key"); then
                    # Detect type from current file value
                    local value_type=$(detect_type "$current_value")
                    
                    # Format system value for comparison
                    local formatted_system_value=$(format_for_file "$system_value" "$value_type")
                    
                    # Compare values
                    if [[ "$current_value" != "$formatted_system_value" ]]; then
                        ((changes++))
                        ((total_changes++))
                        
                        if [[ "$DRY_RUN" == true ]]; then
                            echo "  Would update: $key"
                            echo "    File:   $current_value"
                            echo "    System: $formatted_system_value"
                        else
                            success "  Updated: $key = $formatted_system_value"
                            # Write updated line
                            echo "${prefix}\"${key}\"${middle}${formatted_system_value}${suffix}" >> "$temp_file"
                            continue
                        fi
                    fi
                else
                    # Key doesn't exist in defaults
                    warning "  $key not found in system defaults"
                fi
            fi
            
            # Write line as-is if no changes needed
            [[ "$DRY_RUN" == false ]] && echo "$line" >> "$temp_file"
        done < "$target_file"
        
        # Replace content while preserving symlinks
        if [[ "$DRY_RUN" == false && -f "$temp_file" ]]; then
            # Use cat to preserve symlinks
            if cat "$temp_file" > "$target_file" 2>/dev/null; then
                rm "$temp_file"
            else
                failed_updates+=("$file")
                rm "$temp_file"
            fi
        fi
        
        if [[ $changes -gt 0 ]]; then
            echo "  Total changes: $changes"
        else
            echo "  No changes needed"
        fi
        echo
    done
    
    echo "Processed $total_files files with $total_changes total changes"
    
    if [[ ${#failed_updates[@]} -gt 0 ]]; then
        error "Failed to update the following files:"
        for f in $failed_updates; do
            echo "  - $f"
        done
        return 1
    fi
}

# WRITE command - Apply settings from files to system
cmd_write() {
    local settings_files=("${SETTINGS_PATH}"/*.settings(N))
    local total_settings=0
    local total_applied=0
    local failed_writes=()
    
    if [[ ${#settings_files[@]} -eq 0 ]]; then
        error "No .settings files found in $SETTINGS_PATH"
        return 1
    fi
    
    # Clean up temp file if it exists
    [[ "$GENERATE_SCRIPT" == true && -f "${OUTPUT_PATH}/.temp_commands" ]] && rm "${OUTPUT_PATH}/.temp_commands"
    
    for file in $settings_files; do
        echo "Processing: ${file:t}"
        local domain="${file:t:r}"
        local content
        content=$(<"$file")
        
        # Remove outer braces if present
        content=$(echo "$content" | sed -e '/^[[:space:]]*{[[:space:]]*$/d' -e '/^[[:space:]]*}[[:space:]]*$/d')
        
        # Process each line
        while IFS= read -r line || [[ -n "$line" ]]; do
            # Skip comments and empty lines
            [[ "$line" =~ '^[[:space:]]*#' ]] && continue
            [[ "$line" =~ '^[[:space:]]*$' ]] && continue
            
            # Extract key and value (handle indented lines)
            if [[ "$line" =~ '^[[:space:]]*"([^"]+)"[[:space:]]*=[[:space:]]*(.*);[[:space:]]*$' ]]; then
                local key="${match[1]}"
                local value="${match[2]}"
                
                # Remove quotes from value if present
                value="${value#\"}"
                value="${value%\"}"
                
                ((total_settings++))
                
                if [[ "$DRY_RUN" == true ]]; then
                    # Test mode - just show commands
                    local escaped_key=$(escape_value "$key")
                    local formatted_value=$(format_value_for_write "$value")
                    echo "Would run: defaults write $domain $escaped_key $formatted_value"
                else
                    # Execute mode - check if update is needed
                    if needs_update "$domain" "$key" "$value"; then
                        local escaped_key=$(escape_value "$key")
                        local formatted_value=$(format_value_for_write "$value")
                        local cmd="defaults write $domain $escaped_key $formatted_value"
                        
                        if eval "$cmd" 2>/dev/null; then
                            success "  Applied: $key = $value"
                            ((total_applied++))
                        else
                            error "  Failed: $key = $value"
                            failed_writes+=("$domain.$key")
                        fi
                    fi
                fi
                
                # Generate script if requested
                if [[ "$GENERATE_SCRIPT" == true ]]; then
                    local escaped_key=$(escape_value "$key")
                    local formatted_value=$(format_value_for_write "$value")
                    cat >> "${OUTPUT_PATH}/.temp_commands" <<EOF
# $key
if ! current=\$(defaults read $domain $(escape_value "$key") 2>/dev/null) || [[ "\$current" != "$value" ]]; then
    defaults write $domain $escaped_key $formatted_value
fi

EOF
                fi
            fi
        done <<< "$content"
        echo
    done
    
    # Generate script if requested
    if [[ "$GENERATE_SCRIPT" == true ]]; then
        mkdir -p "$OUTPUT_PATH"
        local script_file="${OUTPUT_PATH}/apply-defaults.sh"
        
        {
            echo "#!/bin/bash"
            echo "# Generated defaults write commands from .settings files"
            echo "# Generated on $(date '+%Y-%m-%d %H:%M:%S')"
            echo "# This script only updates values that have changed"
            echo
            if [[ -f "${OUTPUT_PATH}/.temp_commands" ]]; then
                cat "${OUTPUT_PATH}/.temp_commands"
                rm "${OUTPUT_PATH}/.temp_commands"
            fi
            echo "echo 'All settings applied'"
        } > "$script_file"
        
        chmod +x "$script_file"
        success "Script generated: $script_file"
    fi
    
    if [[ "$DRY_RUN" == false ]]; then
        echo "Applied $total_applied of $total_settings settings"
    else
        echo "Would apply $total_settings settings"
    fi
    
    if [[ ${#failed_writes[@]} -gt 0 ]]; then
        error "Failed to write the following settings:"
        for f in $failed_writes; do
            echo "  - $f"
        done
        return 1
    fi
}

# Main script logic
main() {
    # Parse global options first
    while [[ $# -gt 0 ]] && [[ "$1" =~ ^- ]]; do
        case $1 in
            -n|--dry-run)
                DRY_RUN=true
                shift
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                error "Unknown global option: $1"
                usage
                exit 1
                ;;
        esac
    done
    
    # Get command
    if [[ $# -eq 0 ]]; then
        error "No command specified"
        usage
        exit 1
    fi
    
    local command="$1"
    shift
    
    case $command in
        add)
            cmd_add "$@"
            ;;
        update)
            cmd_update "$@"
            ;;
        write)
            # Parse write-specific options
            while [[ $# -gt 0 ]]; do
                case $1 in
                    -g|--generate)
                        GENERATE_SCRIPT=true
                        shift
                        ;;
                    -o|--output)
                        OUTPUT_PATH="$2"
                        shift 2
                        ;;
                    *)
                        error "Unknown option for write command: $1"
                        exit 1
                        ;;
                esac
            done
            cmd_write
            ;;
        *)
            error "Unknown command: $command"
            usage
            exit 1
            ;;
    esac
}

# Run main function
main "$@"