#!/bin/bash
set -euo pipefail

# Configuration variables
CONFIG_DIR="${COMBO_CONFIG_DIR:-$PWD}"
SOURCE_FILE="${CONFIG_DIR}/.combosource"
IGNORE_FILE="${CONFIG_DIR}/.comboignore"
OUTPUT_FILE="${1:-combined_output.txt}"
HONOR_GITIGNORE="${HONOR_GITIGNORE:-true}"

# Function to check if file is binary
is_binary() {
    local file="$1"
    # Use file command to detect binary files
    file_output=$(file -b --mime-type "$file" 2>/dev/null || echo "application/octet-stream")
    case "$file_output" in
        text/*|application/json|application/javascript|application/xml|application/x-sh|application/x-shellscript)
            return 1 ;;
        *)
            return 0 ;;
    esac
}

# Function to check if path should be ignored
should_ignore() {
    local path="$1"
    local rel_path="${path#$PWD/}"
    
    # Check .comboignore
    if [[ -f "$IGNORE_FILE" ]]; then
        while IFS= read -r pattern || [[ -n "$pattern" ]]; do
            [[ -z "$pattern" || "$pattern" =~ ^# ]] && continue
            # Use fnmatch-style pattern matching
            if [[ "$rel_path" == $pattern || "$rel_path" == */$pattern || $(basename "$rel_path") == $pattern ]]; then
                return 0
            fi
        done < "$IGNORE_FILE"
    fi
    
    # Check .gitignore if enabled
    if [[ "$HONOR_GITIGNORE" == "true" && -f ".gitignore" ]]; then
        # Simple gitignore check (doesn't handle all gitignore syntax)
        while IFS= read -r pattern || [[ -n "$pattern" ]]; do
            [[ -z "$pattern" || "$pattern" =~ ^# ]] && continue
            pattern="${pattern%/}"  # Remove trailing slash
            if [[ "$rel_path" == $pattern || "$rel_path" == */$pattern || $(basename "$rel_path") == $pattern ]]; then
                return 0
            fi
        done < ".gitignore"
    fi
    
    return 1
}

# Function to process a single file
process_file() {
    local file="$1"
    local rel_path="${file#$PWD/}"
    
    # Skip if should be ignored
    should_ignore "$file" && return
    
    # Skip binary files
    is_binary "$file" && return
    
    {
        echo "################## $rel_path START ##################"
        cat "$file"
        echo "################## $rel_path END ####################"
        echo
    } >> "$OUTPUT_FILE"
}

# Function to process directory recursively
process_directory() {
    local dir="$1"
    
    # Skip if directory should be ignored
    should_ignore "$dir" && return
    
    # Process all files in directory
    find "$dir" -type f 2>/dev/null | while IFS= read -r file; do
        process_file "$file"
    done
}

# Function to add entry to .combosource
combo_add() {
    local target="$1"
    local file="${2:-$SOURCE_FILE}"
    
    # Resolve to absolute path
    target=$(realpath "$target" 2>/dev/null || echo "$target")
    
    # Check if already exists
    if [[ -f "$file" ]] && grep -Fxq "$target" "$file" 2>/dev/null; then
        echo "Already in $(basename "$file"): $target"
        return
    fi
    
    echo "$target" >> "$file"
    echo "Added to $(basename "$file"): $target"
}

# Function to add to .comboignore
combo_ignore() {
    combo_add "$1" "$IGNORE_FILE"
}

# Main combo function
combo() {
    # Initialize output file
    > "$OUTPUT_FILE"
    
    # Check if .combosource exists
    if [[ ! -f "$SOURCE_FILE" ]]; then
        echo "Error: No .combosource file found at $SOURCE_FILE"
        echo "Create one with: echo 'path/to/file/or/dir' > .combosource"
        echo "Or use: combo_add 'path/to/file/or/dir'"
        exit 1
    fi
    
    # Process each entry in .combosource
    while IFS= read -r entry || [[ -n "$entry" ]]; do
        # Skip empty lines and comments
        [[ -z "$entry" || "$entry" =~ ^# ]] && continue
        
        # Expand ~ to home directory
        entry="${entry/#\~/$HOME}"
        
        if [[ -f "$entry" ]]; then
            process_file "$entry"
        elif [[ -d "$entry" ]]; then
            process_directory "$entry"
        else
            echo "Warning: '$entry' not found, skipping..." >&2
        fi
    done < "$SOURCE_FILE"
    
    echo "Combined output written to: $OUTPUT_FILE"
}

# Export functions for use in shell
export -f combo_add
export -f combo_ignore

# If script is run directly (not sourced)
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-}" in
        add)
            shift
            combo_add "$@"
            ;;
        ignore)
            shift
            combo_ignore "$@"
            ;;
        *)
            combo "$@"
            ;;
    esac
fi