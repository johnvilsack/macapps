#!/usr/bin/env bash
set -euo pipefail

# Directory to store timer files
TIMER_DIR="${TMPDIR:-/tmp}/bash_timers"
mkdir -p "$TIMER_DIR"

# Cleanup on exit - only remove empty directories
cleanup() {
  if [[ -d "$TIMER_DIR" ]] && [[ -z "$(ls -A "$TIMER_DIR" 2>/dev/null)" ]]; then
    rmdir "$TIMER_DIR" 2>/dev/null || true
  fi
}
trap cleanup EXIT

# Converts nanoseconds to variable-precision dhms output
convert_nsec_to_dhms(){
  local ns="$1"
  local total_secs=$((ns / 1000000000))
  local ms=$(((ns / 1000000) % 1000))

  local d=$((total_secs / 86400))
  local h=$((total_secs / 3600 % 24))
  local m=$((total_secs / 60 % 60))
  local s=$((total_secs % 60))

  local output=""
  (( d > 0 )) && output+="${d}d "
  (( h > 0 )) && output+="${h}h "
  (( m > 0 )) && output+="${m}m "

  if (( total_secs >= 60 )); then
    output+="${s}s"
  elif (( total_secs >= 10 )); then
    output+=$(printf '%d.%01ds' "$s" $((ms / 100)))
  elif (( total_secs >= 3 )); then
    output+=$(printf '%d.%02ds' "$s" $((ms / 100)))
  else
    output+=$(printf '%d.%03ds' "$s" "$ms")
  fi

  echo "$output"
}

timer(){
  local cmd name="default"
  local raw=false seconds=false
  cmd=$1; shift || true

  while (( $# )); do
    case $1 in
      -r|--raw) raw=true ;;
      -s|--seconds) seconds=true ;;
      *) name=$1 ;;
    esac
    shift
  done

  local timer_file="$TIMER_DIR/$name"

  case "$cmd" in
    start)
      # Store just the start time
      date +%s%N > "$timer_file"
      ;;
    lap|end)
      if [[ ! -f "$timer_file" ]]; then
        echo "timer \"$name\" not started" >&2
        return 1
      fi
      
      local start_time last_lap_time
      {
        read -r start_time
        read -r last_lap_time 2>/dev/null || last_lap_time="$start_time"
      } < "$timer_file"
      
      local now
      now=$(date +%s%N)
      
      local time_to_use
      if [[ "$cmd" == "end" ]]; then
        # For end: total time from start
        time_to_use=$((now - start_time))
      else
        # For lap: interval since last lap
        time_to_use=$((now - last_lap_time))
      fi
      
      local output

      if $seconds; then
        local secs=$((time_to_use / 1000000000))
        local ms=$(((time_to_use / 1000000) % 1000))
        output=$(printf '%d.%03d' "$secs" "$ms")
      else
        output=$(convert_nsec_to_dhms "$time_to_use")
      fi

      if $raw; then
        echo "$output"
      elif [[ "$name" == "default" ]]; then
        echo "$output"
      else
        echo "$name: $output"
      fi

      if [[ "$cmd" == end ]]; then
        rm -f "$timer_file"
      else
        # Update file with start time and current time as last lap
        printf '%s\n%s\n' "$start_time" "$now" > "$timer_file"
      fi
      ;;
    *)
      echo "Usage: timer {start|lap|end} [name] [-r|--raw] [-s|--seconds]" >&2
      return 2
      ;;
  esac
}

timer "$@"
